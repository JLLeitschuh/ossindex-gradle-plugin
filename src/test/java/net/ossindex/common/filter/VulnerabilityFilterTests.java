package net.ossindex.common.filter;

import java.util.Collections;

import net.ossindex.common.PackageCoordinate;
import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class VulnerabilityFilterTests
{
  @Test
  public void filterNothing() {
    PackageCoordinate filterPkg = fakeCoordinate();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignorePackage(Collections.singletonList(filterPkg));

    assertFalse(filter.shouldFilter(null, "12345"));
    assertFalse(filter.shouldFilter(Collections.EMPTY_LIST, "12345"));
    PackageCoordinate pkg = PackageCoordinate.newBuilder().build();
    assertFalse(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterPackage() {
    PackageCoordinate filterPkg = fakeCoordinate();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignorePackage(Collections.singletonList(filterPkg));

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg).build();

    assertTrue(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterIssue() {
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability("12345");

    assertTrue(filter.shouldFilter(Collections.singletonList(fakeCoordinate()), "12345"));
  }


  @Test
  public void filterSimplePackageIssue() {
    PackageCoordinate filterPkg = fakeCoordinate();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability(Collections.singletonList(filterPkg), "12345");

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg).build();

    assertTrue(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterExactVersionMatch() {
    PackageCoordinate filterPkg = fakeCoordinate();
    filterPkg = PackageCoordinate.newBuilder(filterPkg).withVersion("1.2.3").build();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability(Collections.singletonList(filterPkg), "12345");

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg).build();

    assertTrue(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterRangeMatch() {
    PackageCoordinate filterPkg = fakeCoordinate();
    filterPkg = PackageCoordinate.newBuilder(filterPkg).withVersion(">=1.0.0 <=2.0.0").build();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability(Collections.singletonList(filterPkg), "12345");

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg)
        .withVersion("1.2.3")
        .build();

    assertTrue(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterSetRangeMatch() {
    PackageCoordinate filterPkg = fakeCoordinate();
    filterPkg = PackageCoordinate.newBuilder(filterPkg).withVersion("[1.0.0,2.0.0)").build();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability(Collections.singletonList(filterPkg), "12345");

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg)
        .withVersion("1.2.3")
        .build();

    assertTrue(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterSetRangeMismatchHigh() {
    PackageCoordinate filterPkg = fakeCoordinate();
    filterPkg = PackageCoordinate.newBuilder(filterPkg).withVersion("(1.2.3,2.0.0)").build();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability(Collections.singletonList(filterPkg), "12345");

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg)
        .withVersion("1.2.3")
        .build();

    assertFalse(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  @Test
  public void filterSetRangeMismatchLow() {
    PackageCoordinate filterPkg = fakeCoordinate();
    filterPkg = PackageCoordinate.newBuilder(filterPkg).withVersion("(1.0.0,1.2.3)").build();
    VulnerabilityFilterImpl filter = new VulnerabilityFilterImpl();
    filter.ignoreVulnerability(Collections.singletonList(filterPkg), "12345");

    PackageCoordinate pkg = PackageCoordinate.newBuilder(filterPkg)
        .withVersion("1.2.3")
        .build();

    assertFalse(filter.shouldFilter(Collections.singletonList(pkg), "12345"));
  }

  //-------- The following code should be replaced by proper faker code
  private static final String ALPHA_NUMERIC_STRING = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_";

  private PackageCoordinate fakeCoordinate() {
    PackageCoordinate pkg = PackageCoordinate.newBuilder()
        .withFormat("maven")
        .withNamespace(randomNamespace())
        .withName(randomName())
        .build();
    return pkg;
  }

  private static String randomName() {
    int count = 15;
    StringBuilder builder = new StringBuilder();
    while (count-- != 0) {
      int character = (int)(Math.random()*ALPHA_NUMERIC_STRING.length());
      builder.append(ALPHA_NUMERIC_STRING.charAt(character));
    }
    return builder.toString();
  }

  private static String randomNamespace() {
    StringBuilder builder = new StringBuilder();
    for (int i = 0; i < 3; i++) {
      builder.append(randomName()).append(".");
    }
    return builder.toString();
  }
}
